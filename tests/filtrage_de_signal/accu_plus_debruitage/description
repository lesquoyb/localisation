comme le filtrage par accumulation n'est pas super super efficace quand le bruit masque totalement le signal initial, on tente de pr√©-filtrer.
m√©thode: FFT: dÈbruitage en faisant une moyen du bruit en dÈbut de signal et en le soustrayant plein de fois ‡ chaque sample


/*
On essaie de voir si on peut reconnaitre une sinusoide dans un signal bruit√©.
On connait la sinuso√Øde de d√©part (sa fr√©quence d'√©mission) et on aimerait la retrouver le plus pr√©cis√©ment possible dans le signal re√ßu.
La transform√©e de Fourier semble convenir parfaitement √† cela, puisqu'elle permet de d√©couper un signal en une somme de sinus. On devrait donc pouvoir retrouver assez pr√©cis√©ment le signal qu'on a √©mit.


Crit√®re d'acceptation:
Un premier test pour √™tre s√ªr que le syst√®me fait bien ce qu'on lui demande est de r√©ussir √† retrouver une sinuso√Øde dans un signal g√©n√©r√© par ordinateur non bruit√© compos√© uniquement de cette sinuso√Øde. 
On continuera ensuite en sommant plusieurs sinuso√Ødes autres lors de la g√©n√©rations.
Enfin on ajoutera du bruit quelconque (cosinus, bruit al√©atoire, whatever ...).
Si toutes ces √©tapes sont r√©ussie on pourra utiliser des vraies donn√©es:
	- on prendra plusieurs signaux d√©j√† enregistr√©s lors d'exp√©riences pr√©c√©dentes
	- on fera de nouveaux enregistrement en tentant plusieurs fa√ßons de bruiter:
			- marcher/ courir
			- parler
			- avoir une musique de fond
			- essayer diff√©rents types d'environnements [ext√©rieur, int√©rieur clos, grands int√©rieurs (autre chose ?) ]
			- combiner plusieurs bruitages.
Les tests se feront √©videmment progressivement, on ne va pas essayer de combiner plusieurs bruitages si on ne ma√Ætrise pas encore le simple bruit ambiant de l'environnement.

Protocole √† suivre:
	Pour chaque enregistrement on pr√©cisera tous les crit√®res (type de signal, d'environnement, bruit, qualit√© de la d√©tection, etc.) afin de pouvoir adapter au mieux le signal envoy√© au fur et √† mesure.

	// J'ai fait √ßa un jour moi ?
*/

